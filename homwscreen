
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { View, Text, StyleSheet, Pressable, ScrollView, ActivityIndicator, FlatList, Image } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { getTodayDemandSummary } from '../src/lib/ai';
import { readRecentSearches } from '../src/lib/storage';

export type RecentSearch = {
  id: string;
  title: string;
  subtitle?: string;
  timestamp: number;
  thumbnailUri?: string | null;
};

export default function HomeScreen() {
  const navigation = useNavigation<any>();
  const [loadingDemand, setLoadingDemand] = useState(false);
  const [demand, setDemand] = useState<string>('');
  const [recent, setRecent] = useState<RecentSearch[]>([]);

  const loadRecent = useCallback(async () => {
    const items = await readRecentSearches();
    setRecent(items);
  }, []);

  const loadDemand = useCallback(async () => {
    setLoadingDemand(true);
    try {
      const summary = await getTodayDemandSummary();
      setDemand(summary);
    } catch (e) {
      setDemand("Unable to load today's demand right now. Please try again later.");
    } finally {
      setLoadingDemand(false);
    }
  }, []);

  useEffect(() => {
    loadRecent();
    loadDemand();
  }, [loadRecent, loadDemand]);

  const header = useMemo(() => (
    <View style={styles.header}>
      <Text style={styles.appTitle}>AgriSense</Text>
      <Text style={styles.subtitle}>AI for soil analysis, crop picks, and market pulse</Text>
    </View>
  ), []);

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scroll}>
        {header}

        <View style={styles.scanBanner}>
          <View style={{ flex: 1 }}>
            <Text style={styles.bannerTitle}>Scan your soil</Text>
            <Text style={styles.bannerText}>Upload a soil image to get soil condition, climate snapshot, recommended crops, and a rotation plan.</Text>
            <Pressable onPress={() => navigation.navigate('SoilScan')} style={({ pressed }) => [styles.cta, pressed && styles.pressed]}>
              <Text style={styles.ctaText}>Start Scan</Text>
            </Pressable>
          </View>
          <Image source={{ uri: 'https://api.a0.dev/assets/image?text=close-up%20soil%20texture%20with%20a%20sprouting%20seedling&aspect=1:1' }} style={styles.bannerImg} />
        </View>

        <Section title="Today's Crop Demand (AI)">
          {loadingDemand ? (
            <View style={styles.centerRow}><ActivityIndicator color="#166534" /><Text style={styles.loadingText}>Fetching insightsâ€¦</Text></View>
          ) : (
            <Card><Text style={styles.body}>{demand}</Text></Card>
          )}
        </Section>

        <Section title="Recent Searches">
          {recent.length === 0 ? (
            <EmptyState message="No recent analyses yet. Start by scanning your soil." actionLabel="Scan Soil" onAction={() => navigation.navigate('SoilScan')} />
          ) : (
            <FlatList
              data={recent}
              keyExtractor={(item) => item.id}
              renderItem={({ item }) => (
                <Card>
                  <View style={{ flexDirection: 'row', gap: 12, alignItems: 'center' }}>
                    {item.thumbnailUri ? <Image source={{ uri: item.thumbnailUri }} style={{ width: 44, height: 44, borderRadius: 8 }} /> : null}
                    <View style={{ flex: 1 }}>
                      <Text style={styles.itemTitle}>{item.title}</Text>
                      {item.subtitle ? <Text style={styles.muted}>{item.subtitle}</Text> : null}
                    </View>
                  </View>
                </Card>
              )}
              scrollEnabled={false}
            />
          )}
        </Section>
      </ScrollView>
    </View>
  );
}

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>{title}</Text>
      {children}
    </View>
  );
}

function Card({ children }: { children: React.ReactNode }) {
  return <View style={styles.card}>{children}</View>;
}

function EmptyState({ message, actionLabel, onAction }: { message: string; actionLabel: string; onAction: () => void }) {
  return (
    <View style={styles.empty}>
      <Text style={styles.muted}>{message}</Text>
      <Pressable onPress={onAction} style={({ pressed }) => [styles.ctaSmall, pressed && styles.pressed]}>
        <Text style={styles.ctaSmallText}>{actionLabel}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f0fdf4' }, // agri light green
  scroll: { padding: 16, paddingBottom: 40 },
  header: { marginBottom: 12 },
  appTitle: { fontSize: 28, fontWeight: '800', color: '#14532d' },
  subtitle: { marginTop: 4, color: '#166534' },
  scanBanner: { backgroundColor: '#dcfce7', borderRadius: 16, padding: 16, flexDirection: 'row', gap: 12, alignItems: 'center' },
  bannerTitle: { fontSize: 18, fontWeight: '700', color: '#166534' },
  bannerText: { color: '#166534', marginTop: 4 },
  bannerImg: { width: 80, height: 80, borderRadius: 12 },
  cta: { backgroundColor: '#16a34a', alignSelf: 'flex-start', paddingVertical: 10, paddingHorizontal: 14, borderRadius: 10, marginTop: 10 },
  ctaText: { color: 'white', fontWeight: '700' },
  section: { marginTop: 20 },
  sectionTitle: { fontSize: 16, fontWeight: '700', color: '#14532d', marginBottom: 8 },
  card: { backgroundColor: 'white', borderRadius: 12, padding: 14, marginBottom: 12, shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.06, shadowRadius: 6, elevation: 2 },
  body: { color: '#0f172a', lineHeight: 20 },
  itemTitle: { fontWeight: '600', color: '#0f172a', marginBottom: 4 },
  muted: { color: '#166534' },
  centerRow: { flexDirection: 'row', alignItems: 'center', gap: 8 },
  loadingText: { marginLeft: 8, color: '#166534' },
  pressed: { opacity: 0.9 },
  empty: { alignItems: 'flex-start', gap: 10 },
  ctaSmall: { backgroundColor: '#16a34a', paddingVertical: 8, paddingHorizontal: 12, borderRadius: 10 },
  ctaSmallText: { color: 'white', fontWeight: '700' },
});
